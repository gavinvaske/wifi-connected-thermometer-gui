extends default

block content
  .wrapper
    #chart.mb-1
    script.
      function drawGraph() {
        $.getJSON('/api/temperatures', function(data) { 
          // Display Temperatures stored in DB as HTML for development purposes
          // document.getElementById('dataPoints').innerHTML = JSON.stringify(data['temperatures'], null, 2);
          let temperatureRecords = data['temperatures']
          let temperatureDataPoints = []
          let timeDataPoints = []
          let startIndex = 0
          let latestTemperatureRecord = temperatureRecords[temperatureRecords.length - 1]
          
          // If the last value in the database is older then 1 second ago
          if(latestTemperatureRecord.timeStamp < (Math.floor(Date.now() / 1000) - 1 || temperatureRecords.length == 0)){
            $.ajax({
              type: 'POST',
              url: '/api/temperatures/blank',
              data: JSON.stringify( {'temperature-measurement' : 0} ),
              success: function(data){
                  // Do nothing upon completion
              },
              dataType: 'json'
            });
          }

           $.ajax({
            type: 'GET',
            url: '/api/settings',
            data: JSON.stringify( {} ),
            success: function(settings){
              let minThreshold = Number(settings.minThreshold)
              let maxThreshold = Number(settings.maxThreshold)
              // Do nothing upon completion
              let latestTemp = Number(latestTemperatureRecord.temperature)
              // IF temp is tooo HOT
              if(latestTemp > maxThreshold && latestTemp != 0 && !isNaN(latestTemp) && !isNaN(maxThreshold) ){
                $.ajax({
                  type: 'POST',
                  url: '/api/twilio/alerts',
                  data: {'alertType' : 1},
                  success: function(data){
                      // Do nothing upon completion
                  },
                  dataType: 'json'
                });
              }
              // IF temp is tooo COLD
              if(latestTemp < minThreshold && latestTemp != 0 && !isNaN(latestTemp) && !isNaN(minThreshold) ){
                $.ajax({
                  type: 'POST',
                  url: '/api/twilio/alerts',
                  data: {'alertType' : 0},
                  success: function(data){
                      // Do nothing upon completion
                  },
                  dataType: 'json'
                });
              }
            },
            dataType: 'json'
          });


          temperatureRecords = temperatureRecords.slice(-300)
          temperatureRecords.forEach((temperatureRecord, index) => {
            timeDataPoints.push(index)
            temperatureDataPoints.push(temperatureRecord.temperature)
          });
          var layout = {
            title: 'Tempeature Measurements',
            xaxis: {
              title: 'Seconds Ago (Seconds)',
              range: [0, 300],
              showgrid: false,
              zeroline: false
            },
            yaxis: {
              title: 'Temperature (Celsius)',
              range: [10, 50],
              showline: false
            },
            height: 650,
              margin: {
                l: 75,
                r: 50,
                b: 60,
                t: 60,
                pad: 4
              },
            plot_bgcolor: '#eeeeee',
              font: {
                family: 'Roboto',
                size: 18,
                color: '#7f7f7f'
              }
          };
          var data = [{
            x: timeDataPoints,
            y: temperatureDataPoints.reverse(),
            hovertemplate: 'Temp.: %{y:.2f}<extra></extra>',
            type: 'line',
            fill: 'tozeroy',
            fillcolor: '#DFF1FD',
          }];
          var graphDiv = document.getElementById('chart')
          Plotly.react(graphDiv, data, layout, {responsive: true});
        });
      }
      // Redraw Graph every 1000 milliseconds
      setInterval(function() {
        drawGraph()
      }, 1000);
  ///////////////////  
  // SETTINGS FORM //
  ///////////////////

  .row
    div.col-6
      .col-1.align-self-start
        form(method='POST' action='/update-settings').form-horizontal
          fieldset.center
            // Form Name
            legend(align='center').bg-primary.h1 Settings
            // Text input
            .form-group
              label.col-md-4.control-label(for='phone_number') Phone Number
              .col-md-4
                input#phone_number.form-control.input-md(name='phoneNumber' type='text' placeholder='515-555-5555' required='')
            // Textarea
            .form-group
              label.col-md-4.control-label(for='max_temp_alert_message') Alert Message (Max)
              .col-md-4
                textarea#max_temp_alert_message.form-control(name='maxAlertMessage')
            // Textarea
            .form-group
              label.col-md-4.control-label(for='minimum_temp_alert_message') Alert Message (Minimum)
              .col-md-4
                textarea#minimum_temp_alert_message.form-control(name='minAlertMessage')
            // Password input
            .form-group
              label.col-md-4.control-label(for='max_temp') Threshold (Max Temp.)
              .col-md-4
                input#max_temp.form-control.input-md(name='maxThreshold' type='text' placeholder='50' required='')
            // Password input
            .form-group
              label.col-md-4.control-label(for='minimum_temp') Threshold (Minimum Temp.)
              .col-md-4
                input#minimum_temp.form-control.input-md(name='minThreshold' type='text' placeholder='10' required='')
            // Select Basic
            .form-group
              label.col-md-4.control-label(for='temperatureScale') Temperature Scale
              .col-md-4
                select#temperatureScale.form-control(name='temperatureScale')
                  option(value='1') Celsius
                  option(value='2') Fahrenheit
            // Textarea
            .form-group
              label.col-md-4.control-label(for='textarea') Error Message
              .col-md-4
                textarea#textarea.form-control(name='textarea')
            // Button
            .form-group
              label.col-md-4.control-label(for='submit') Save Settings
              .col-md-4
                button#submit.btn.btn-success(name='submit') Save
        form(method='POST' action='/api/test').form-horizontal
          fieldset.center
            // Form Name
            legend(align='center').bg-primary.h1 Control Panel
            // Button (Double)
            .form-group.center
              label.col-md-6.control-label(for='button1id') Power Buttons
              .col-md-6.center
                button#button-on.btn.btn-success(name='button-on' value='1') ON
                button#button-off.btn.btn-danger(name='button-off' value='1') OFF


